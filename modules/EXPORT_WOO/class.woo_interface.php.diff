8,26d7
< /*********************************************************************************************
<  *Converting a WOO definition to table definition
< 
<  		//CONVERT Woo definition to table definition
< 		// \t -> ;\t\/\/ 'type' =>
< 		// \t -> $this->fields_array[] = array('name' => '
< 		//integer -> 'int(11)',  'comment' => '
< 		//string -> varchar(" . STOCK_ID_LENGTH . ")',  'comment' => '
< 		//date-time -> 'timestamp',  'comment' => '
< 		//boolean -> 'bool',  'comment' => '
< 		//array -> 'int(11)',  'foreign_obj' => '',  'comment' => '
< 		//object -> 'int(11)',  'foreign_obj' => '',  'comment' => '
< 		//read-only -> 'readwrite' = > 'readonly'
< 		//^ -> \t\$this->fields_array[] = array('name' => '
< 		//;\t\/\/ -> ',
< 		// --> 'comment' => '
< 		// $ -> );
<  * *******************************************************************************************/
< 
28d8
< require_once( '../ksf_modules_common/defines.inc.php' );
57,60d36
< 	var $entry_array;
< 	var $selected_id;	//!< find_submit sets this
< 	var $iam;
< 	var $interestedin;	//!< array of 'events' we are interested in and their associated data
62c38
< 	function __construct($serverURL = " ", $key, $secret, $options, $client = null)
---
> 	function __construct($serverURL, $key, $secret, $options, $client = null)
64d39
< 		$this->iam = get_class( $this );
90,91d64
< 		//$this->wc_client = null;
< 		//Still used by class.woo_product
114,209d86
< 		$this->fields_array2entry();
< 		$this->build_interestedin();
< 		$this->register_with_eventloop();
< 	}
< 	function backtrace()
< 	{
< 		echo "<br />";
< 		array_walk(debug_backtrace(),create_function('$a,$b','print "{$a[\'function\']}()(".basename($a[\'file\']).":{$a[\'line\']});<br /> ";'));
< 	}
< 	/************************************************************//**
< 	 *
< 	 *	tell.  Function to tell the using routine that we took
< 	 *	an action.  That will let the client pass that data to
< 	 *	any other plugin routines that are interested in that
< 	 *	fact.
< 	 *
< 	 *	@param msg what event message to pass
< 	 *	@param method Who triggered that event so that we don't pass back to them into an endless loop
< 	 *
< 	 * **************************************************************/
< 	function tell( $msg, $method )
< 	{
< 		$this->notify( __METHOD__ . "::"  . __LINE__, "WARN" );
< 		if( isset( $this->client ) )
< 			if( is_callable( $this->client->eventloop() ) )
< 				$this->client->eventloop( $msg, $method );
< 	}
< 	/***************************************************************//**
< 	 *dummy   
< 	 *
< 	 * 	Dummy function so that build_interestedin has something to
< 	 * 	put in as an example.
< 	 *
< 	 * 	@returns FALSE
< 	 * ******************************************************************/
< 	function dummy( $obj, $msg )
< 	{
< 		return FALSE;
< 	}
< 	function register_with_eventloop()
< 	{
< 		global $eventloop;
< 		if( null != $eventloop )
< 		{
< 			foreach( $this->interestedin as $key => $val )
< 			{
< 				$eventloop->ObserverRegister( $this, $key );
< 			}
< 		}
< 	}
< 	/***************************************************************//**
< 	 *build_interestedin
< 	 *
< 	 * 	DEMO function that needs to be overridden
< 	 * 	This function builds the table of events that we
< 	 * 	want to react to and what handlers we are passing the
< 	 * 	data to so we can react.
< 	 * ******************************************************************/
< 	function build_interestedin()
< 	{
< 		//This NEEDS to be overridden
< 		$this->interestedin[WOO_DUMMY_EVENT]['function'] = "dummy";
< 	}
< 	/***************************************************************//**
< 	 *notified
< 	 *
< 	 * 	When we are notified that an event happened, check to see
< 	 * 	what we want to do about it
< 	 *
< 	 * @param $obj Object of who triggered the event
< 	 * @param $event what event was triggered
< 	 * @param $msg what message (data) was passed to us because of the event
< 	 * ******************************************************************/
< 	function notified( $obj, $event, $msg )
< 	{
< 		if( isset( $this->interestedin[$event] ) )
< 		{
< 			$tocall = $this->interested[$event]['function'];
< 			$this->$tocall( $obj, $msg );
< 		}
< 	}
< 	/************************************************************//**
< 	 *
< 	 *	register.  Function to tell the using routine that we are
< 	 *	interested in other plugins having taken an action. 
< 	 *
< 	 *	@param msg what event message we are interested in
< 	 *	@param method Who we are so we can be told
< 	 *
< 	 * **************************************************************/
< 	function register( $msg, $method )
< 	{
< 		$this->notify( __METHOD__ . "::"  . __LINE__, "WARN" );
< 		if( isset( $this->client ) )
< 			if( is_callable( $this->client->eventregister() ) )
< 				$this->client->eventregister( $msg, $method );
217c94
< 		else if( "WARN" == $level AND $this->debug >= 1)
---
> 		else if( "NOTIFY" == $level )
221c98
< 		else if( "NOTIFY" == $level AND $this->debug >= 2)
---
> 		else if( "WARN" == $level )
225c102
< 		else if( "DEBUG" == $level AND $this->debug >= 3)
---
> 		else if( "DEBUG" == $level )
235,541d111
< 
< 	/*********************************************************************************//**
< 	 *fields_array2var
< 	 *	Take the data out of POST variables and put them into
< 	 *	the variables defined as table columns (fields_array)
< 	 *
< 	 *	@returns int count of fields set
< 	 *
< 	 * ***********************************************************************************/
< 	/*@int@*/function fields_array2var()
< 	{
< 		$count = 0;
< 		$this->reset_values();
< 		foreach( $this->fields_array as $row )
< 		{
< 			$var = $row['name'];
< 			if( isset( $_POST[$var] ) )
< 			{
< 				$this->$var = $_POST[$var];
< 				$count++;
< 			}
< 		}
< 		return $count;
< 	}
< 	/*********************************************************************************//**
< 	 *master_form
< 	 *	Display 2 forms - the summary of items with edit/delete
< 	 *		The edit/entry form for 1 row of data
< 	 *	assumes entry_array has been built (constructor)
< 	 *	assumes table_details has been built (constructor)
< 	 *	assumes selected_id has been set (constructor?)
< 	 *	assumes iam has been set (constructor)
< 	 *
< 	 * ***********************************************************************************/
< 	function master_form()
< 	{
< 		global $Ajax;
< 		//var_dump( $_POST );
< 		//var_dump( $_GET );
< 		$this->notify( __METHOD__ . "::"  . __LINE__, "WARN" );
< 		//simple_page_mode();
< 		div_start('form');
< 		//$this->notify( __METHOD__ . "::"  . __LINE__ . " Mode: " . $Mode );
< 		$this->selected_id = find_submit('Edit');
< 		$count = $this->fields_array2var();
< 		$key = $this->table_details['primarykey'];
< 		if( isset( $this->$key ) )
< 		{
< 			$this->notify( __METHOD__ . ":" . " Key set.  Updating", "WARN" );
< 			$this->update_table();
< 		}
< 		else if( $count > 0 )
< 		{
< 			$this->notify( __METHOD__ . ":" . " Key NOT set.  Inserting", "WARN" );
< 			$this->insert_table();
< 		}
< 		$this->reset_values();
< 		
< 		$sql = "SELECT ";
< 		$rowcount = 0;
< 		foreach( $this->entry_array as $row )
< 		{
< 			if( $rowcount > 0 ) $sql .= ", ";
< 			$sql .= $row['name'];
< 			$rowcount++;
< 		}
< 		$sql .= " from " . $this->table_details['tablename'];
< 		if( isset( $this->table_details['orderby'] ) )
< 			$sql .= " ORDER BY " . $this->table_details['orderby'];
< 	
< 		$this->notify( __METHOD__ . ":" . __LINE__ . ":" . $sql, "WARN" );
< 		$this->notify( __METHOD__ . ":" . __LINE__ . ":" . " Display data", "WARN" );
< 		$this->display_table_with_edit( $sql, $this->entry_array, $this->table_details['primarykey'] );
< 		$this->display_edit_form( $this->entry_array, $this->selected_id, "create_" . $this->iam . "_form" );
< 		div_end();
< 		//$Ajax->activate('form');
< 	}
< 	/*@array@*/function fields_array2entry()
< 	{
< 		//debug_print_backtrace();
< 		//array_walk(debug_backtrace(),create_function('$a,$b','print "{$a[\'function\']}()(".basename($a[\'file\']).":{$a[\'line\']});<br /> ";'));
< 		$this->notify( __METHOD__ . "::"  . __LINE__, "DEBUG" );
< 		//Take a fields_array definition and conver to the array needed
< 		//to create edit forms for display_table_with_edit and display_edit_form
< 		$entry_array = array();
< 		$count = 0;
< 		foreach( $this->fields_array as $row )
< 		{
< 			$entry_array[$count]['column'] = $row['name'];
< 			if( !isset( $row['foreign_obj'] ) )
< 			{
< 				$this->notify( __METHOD__ . "::"  . __LINE__, "DEBUG" );
< 				$open = strpos($row['type'], "(");
< 				if( false !== $open )
< 				{
< 					$type = strstr( $row['type'], 0, $open );
< 					$close = strpos( $row['type'], ")" );
< 					$num = strstr( $row['type'], $open, $close );
< 					$entry_array[$count]['type'] = $type;
< 					$entry_array[$count]['size'] = $num;
< 				}
< 				else
< 				{
< 					$entry_array[$count]['type'] = $row['type'];
< 				}
< 			}
< 			else
< 			{
< 				$this->notify( __METHOD__ . "::"  . __LINE__, "WARN" );
< 				//It is an index into another table.  Should be a drop down in edit form
< 				$entry_array[$count]['type'] = "dropdown";
< 				$entry_array[$count]['size'] = "11";
< 				$entry_array[$count]['foreign_obj'] = $row['foreign_obj'];
< 				if( isset( $row['foreign_column'] ) )
< 					$entry_array[$count]['foreign_column']= $row['foreign_column'];
< 				else
< 					$entry_array[$count]['foreign_column']= $row['name'];
< 
< 				//
< 				//Ensure that foreign_object_array contains the table too...
< 			}
< 				$entry_array[$count]['name'] =	$row['name'];
< 			if( isset( $row['label'] ) )
< 				$entry_array[$count]['label'] =	$row['label'];
< 			else
< 			if( isset( $row['comment'] ) )
< 				$entry_array[$count]['label'] =	$row['comment'];
< 			else
< 				$entry_array[$count]['label'] =	$row['name'];
< 			if( isset( $row['readwrite'] ) )
< 				$entry_array[$count]['readwrite'] =	$row['readwrite'];
< 			else
< 				$entry_array[$count]['readwrite'] = "readwrite";	//ASSUMING no restriction...
< 			$count++;
< 		}
< 		$this->entry_array = $entry_array;
< 		return $entry_array;
< 	}
< 	function display_table_with_edit( $sql, $headers, $index, $return_to = null )
< 	{
< 		$this->notify( __METHOD__ . "::"  . __LINE__, "DEBUG" );
< 		$columncount = 0;
< 		foreach( $headers as $row )
< 		{
< 			$th[$columncount] = $row['label'];
< 			$datacol[$columncount] = $row['name'];
< 			$columncount++;
< 		}
< 		//Edit
< 			$th[$columncount] = "";
< 			$columncount++;
< 		//Delete
< 			$th[$columncount] = "";
< 			//$th[$columncount] = $row[$index];
< 			$columncount++;
< 			//$multi=false, $dummy=false, $action="", $name=""
< 		start_form( );
< 		//start_form( false, false, "woo_form_handler.php", "" );
< 		start_table(TABLESTYLE, "width=80%" );
< 		//inactive_control_column($th);
< 		table_header( $th );
< 		$k=0;
< 
< 		$result = db_query( $sql, __METHOD__ . " Couldn't run query" );
< 		while( $nextrow = db_fetch( $result ) )
< 		{
< 			alt_table_row_color($k);
< 			for( $c = 0; $c <= $columncount - 3; $c++ )
< 			{
< 				label_cell( $nextrow[$c] );
< 			}
< 			edit_button_cell("Edit" . $nextrow[$index], _("Edit") );
< 			delete_button_cell("Delete" . $nextrow[$index], _("Delete") );
< 			//inactive_control_cell( $nextrow[$index] );
< 			end_row();
< 		}
< 		//inactive_control_row($th);
< 		hidden( 'table_with_edit', 1 );
< 		if( null != $return_to )
< 			hidden( 'return_to', $return_to );
< 		end_table();
< 		end_form();
< 	}
< 	function form_post_handler()
< 	{
< 		$this->notify( __METHOD__ . "::"  . __LINE__, "WARN" );
< 		$count = 0;
< 		if( isset( $_POST['table_with_edit'] ) )
< 		{
< 			//Need to load that record and then send to display_edit_form
< 		}
< 		else if( isset( $_POST['edit_form'] ) )
< 		{
< 			//load variables into our values...
< 			foreach( $this->properties_array as $var )
< 			{
< 				if( isset( $_POST[$var] ) )
< 				{
< 					$this->$var = $_POST[$var];
< 					$count++;
< 				}
< 			}
< 		}
< 		//$count = count( $this->entry_array );	
< 		$key = $this->table_details['primarykey'];
< 		if( isset( $this->$key ) )
< 		{
< 			$this->notify( __METHOD__ . ":" . " Key set.  Updating", "WARN" );
< 			$this->update_table();
< 		}
< 		else if( $count > 0 )
< 		{
< 			$this->notify( __METHOD__ . ":" . " Key NOT set.  Inserting", "WARN" );
< 			$this->insert_table();
< 		}
< 		else
< 		{
< 			echo "<br />" . __METHOD__ . " No values set.  Why are we here?<br />";
< 			echo "<br />" . __METHOD__ . " Class is " . get_class( $this ) . "<br />";
< 			var_dump( $_POST );
< 			$this->wc_client = null;
< 			echo "<br /><br />" . __METHOD__ . " Class variables are <br />";
< 			 var_dump( $this );
< 		}
< 	}
< 	function display_edit_form( $form_def, $selected_id = -1, $return_to )
< 	{
< 		$this->notify( __METHOD__ . "::"  . __LINE__, "DEBUG" );
< 		if( $selected_id > -1 )
< 		{
< 			//We are editing a row, so need to query for the values
< 			$sql = "SELECT * from " . $this->table_details['tablename'];
< 			$sql .= " WHERE " . $this->table_details['primarykey'] . " = '" . $selected_id . "'";
< 			$res = db_query( $sql, __METHOD__ . " Couldn't query selected" );
< 			$arr = db_fetch_assoc( $res );
< 			$this->array2var( $arr );
< 		}
< 		start_form(  );
< 		//start_form(  false, false, "woo_form_handler.php", "" );
< 		start_table(TABLESTYLE2 );
< 		foreach( $form_def as $row )
< 		{
< 			$var = $row['name'];
< 			if( $row['readwrite'] == "read" )
< 			{
< 				//can't edit this column as it isn't set write nor readwrite
< 				if( isset( $this->$var ) )
< 					label_row( _($row['label'] . ":"), $this->$var );
< 			}
< 			else
< 			{
< 				if( $row['type'] == "varchar" )
< 					text_row(_($row['label'] . ":"), $row['name'], $this->$var, $row['size'], $row['size']);
< 				/*
< 				else if( $row['type'] == "dropdown" )
< 				{
< 					$ddsql = "select * from " . $row['foreign_obj'];
< 					$ddsql .= " ORDER BY " . $row['foreign_column'];
< 					$this->combo_list_row( $ddsql, $row['foreign_column'], 
< 								_($row['label'] . ":"), $row['name'], 
< 								$selected_id, false, false ); 
< 				}
< 				 */
< 				else if( $row['type'] == "bool" )
< 					check_row(_($row['label'] . ":"), $row['name'] ); 
< 				else
< 					text_row(_($row['label'] . ":"), $row['name'], null, $row['size'], $row['size']);
< 			}
< 		}
< 
< 
< 		end_table();
< 		hidden( 'edit_form', 1 );
< 		hidden( 'my_class', get_class( $this ) );
< 		hidden( 'return_to', $return_to );
< 		hidden( 'action', $return_to );
< 		submit_center('ADD_ITEM', _("Add Item") );
< //		submit_add_or_update_center($selected_id == -1, '', 'both', false);
< 		end_form();
< 		if( $this->debug >= 3 ) $this->backtrace();
< 	}
< 	function combo_list( $sql, $order_by_field, $name, $selected_id=null, $none_option=false, $submit_on_change=false)
< 	{
< 		global $path_to_root;
< 		include_once( $path_to_root . "/includes/ui/ui_lists.inc" );
< 		return combo_input($name, $selected_id, $sql, $order_by_field,  'name',
< 		array(
< 			'order' => $order_by_field,
< 			'spec_option' => $none_option,
< 			'spec_id' => ALL_NUMERIC,
< 			'select_submit'=> $submit_on_change,
< 			'async' => false,
< 		) );
< 	}
< 	function combo_list_cells( $sql, $order_by_field, $label, $name, $selected_id = null, $none_option=false, $submit_on_change=false )
< 	{
< 		echo "<td>$label</td>";
< 		echo "<td>";
< 		$this->combo_list( $sql, $order_by_field, $name, $selected_id, $none_option, $submit_on_change);
< 		echo "</td>";
< 	}
< 	function combo_list_row( $sql, $order_by_field, $label, $name, $selected_id = null, $none_option=false, $submit_on_change=false )
< 	{
< 		echo "<tr><td class='label'>$label</td>";
< 		$this->combo_list_cells( $sql, $order_by_field, $label, $name, $selected_id, $none_option, $submit_on_change);
< 		echo "</tr>";
< 	}
548,558c118
< 
< 		//The following should be common to pretty well EVERY table...
< 		$ind = "id_" . $this->iam;
< 		$this->fields_array[] = array('name' => $ind, 'type' => 'int(11)', 'auto_increment' => 'yes', 'readwrite' => 'read' );
< 		$this->fields_array[] = array('name' => 'updated_ts', 'type' => 'timestamp', 'null' => 'NOT NULL', 'default' => 'CURRENT_TIMESTAMP', 'readwrite' => 'read' );
< 		$this->table_details['tablename'] = $this->company_prefix . $this->iam;
< 		$this->table_details['primarykey'] = $ind;
< 		//$this->table_details['index'][0]['type'] = 'unique';
< 		//$this->table_details['index'][0]['columns'] = "variablename";
< 		//$this->table_details['index'][0]['keyname'] = "variablename";
< 
---
> 	
627,644d186
< 	/*******************************************************************//**
< 	 *
< 	 * 	reset_values.  unset all variables listed in properties_array
< 	 *
< 	 * 	As we cycle through a database result set putting values into
< 	 * 	the object, we want to ensure we don't have any values left over
< 	 * 	from the previous row.  This unsets all values so that they
< 	 * 	are cleared.
< 	 * 
< 	 * **********************************************************************/
< 	function reset_values()
< 	{
< 		foreach( $this->properties_array as $val )
< 		{
< 			unset( $this->$val );
< 		}
< 	}
< 
653a196
> 		$iam = get_class( $this );
659c202
< 			$newobj = new $this->iam($this->serverURL, $this->key, $this->secret, $this->options, $this );
---
> 			$newobj = new $iam($this->serverURL, $this->key, $this->secret, $this->options, $this );
783d325
< 		$this->notify( __METHOD__ . "::"  . __LINE__, "WARN" );
797d338
< 		$this->notify( __METHOD__ . "::"  . __LINE__, "WARN" );
