<?php

$path_to_root = "../..";

require_once( 'class.woo_interface.php' );
require_once( 'class.woo_prod_variable_master.php' );

/*************************************************************************//**
 *
 *	A variable product is a product that is identicle except for attributes
 *	such as size/color/etc
 *
 *	We are going to use a SKU that is basesku-attr1-attr2-attr3
 *	This class/table is for generating this full SKU
 *	We will xref each variable against the master SKU but each
 *	will have a priority
 *
 *	WOO needs the data sent as follows:
 *		name/type/categories/images same as simple
 *		*ATTRIBUTES
 *			id/name
 *			position (priority?)
 *			visible (true)
 *			variation (true)
 *			options (i.e. colors)
 *		default attributes
 *			id/name
 *			option (i.e. red)
 *		VARIATIONS
 *			regular price
 *			sku?
 *			image
 *			attribute
 *				name
 *				option
 
 * ***************************************************************************/



class woo_prod_variable_sku_full extends woo_prod_variable_master
{
	var $id_woo_prod_variable_sku_full;
	var $updated_ts;
	var $stock_id;		//!< Master Product Stock_id
	var $sku;		//!< Generated by this class
	var $description;	//!< Human readable version of the SKU to use as the product description
	var $inserted_fa;	//!< Have we inserted into FA yet?
	var $woo_id;		//!< WooCommerce ID returned on the insert
	var $attribsarray;	//!< Array of Values for the Variable Name to be added to SKUs
	var $minattr;		//!< The minimum number of attributes a master SKU has
	var $maxattr;		//!< The maximum number of attributes a master SKU has

	function define_table()
	{
		woo_interface::define_table();
		//$this->fields_array[] = array('name' => 'stock_id', 'label' => 'SKU', 'type' => $sidl, 'null' => 'NOT NULL',  'readwrite' => 'readwrite');
		$sidl = 'varchar(' . STOCK_ID_LENGTH . ')';
		$descl = 'varchar(' . DESCRIPTION_LENGTH . ')';
		//$this->fields_array[] = array('name' => 'variablename', 'type' => $sidl, 'null' => 'NOT NULL',  'readwrite' => 'readwrite');
		$this->fields_array[] = array('name' => 'stock_id', 'label' => 'Stock ID', 'type' => $sidl, 'null' => 'NOT NULL',  'readwrite' => 'readwrite', /*'foreign_obj' => 'woo_prod_variable_master', 'foreign_column' => 'stock_id'*/ 'comment' => 'Master Product stock_id');
		$this->fields_array[] = array('name' => 'sku', 'label' => 'SKU', 'type' => $sidl, 'null' => 'NOT NULL',  'readwrite' => 'readwrite', 'comment' => 'generated sku for this variable product' );
		$this->fields_array[] = array('name' => 'description', 'label' => 'Description', 'type' => $descl, 'null' => 'NOT NULL',  'readwrite' => 'readwrite' );
		$this->fields_array[] = array('name' => 'inserted_fa', 'label' => 'Inserted into FA', 'type' => 'bool', 'null' => 'NOT NULL',  'readwrite' => 'readwrite', 'default' => '0' );
		$this->fields_array[] = array('name' => 'woo_id', 'label' => 'WooCommerce ID', 'type' => 'int(11)', 'null' => 'NOT NULL',  'readwrite' => 'readwrite', 'default' => '0' );

		$this->table_details['orderby'] = 'sku';
		$this->table_details['index'][0]['type'] = 'unique';
		$this->table_details['index'][0]['columns'] = "stock_id, sku";
		$this->table_details['index'][0]['keyname'] = "stock_id-sku";
		$this->table_details['index'][1]['type'] = 'unique';
		$this->table_details['index'][1]['columns'] = "sku";
		$this->table_details['index'][1]['keyname'] = "sku";
//		$this->table_details['foreign'][0] = array( 'column' => "variablename", 'foreigntable' => "woo_prod_variable_variables", "foreigncolumn" => "variablename", "on_update" => "restrict", "on_delete" => "restrict" );	
//		$this->table_details['foreign'][1] = array( 'column' => "stock_id", 'foreigntable' => "woo_prod_variable_master", "foreigncolumn" => "stock_id", "on_update" => "restrict", "on_delete" => "restrict" );	
	}
	/*********************************************************************************//**
	 *master_form
	 *	Display the summary of items with edit/delete
	 *		
	 *	assumes entry_array has been built (constructor)
	 *	assumes table_details has been built (constructor)
	 *	assumes selected_id has been set (constructor?)
	 *	assumes iam has been set (constructor)
	 *
	 * ***********************************************************************************/
	function master_form()
	{
		global $Ajax;
		$this->notify( __METHOD__ . "::"  . __METHOD__ . ":" . __LINE__, "WARN" );
		$this->create_full();
		div_start('form');
		$count = $this->fields_array2var();
		
		$sql = "SELECT ";
		$rowcount = 0;
		foreach( $this->entry_array as $row )
		{
			if( $rowcount > 0 ) $sql .= ", ";
			$sql .= $row['name'];
			$rowcount++;
		}
		$sql .= " from " . $this->table_details['tablename'];
		if( isset( $this->table_details['orderby'] ) )
			$sql .= " ORDER BY " . $this->table_details['orderby'];
	
		$this->notify( __METHOD__ . ":" . __METHOD__ . ":" . __LINE__ . ":" . $sql, "WARN" );
		$this->notify( __METHOD__ . ":" . __METHOD__ . ":" . __LINE__ . ":" . " Display data", "WARN" );
		$this->display_table_with_edit( $sql, $this->entry_array, $this->table_details['primarykey'] );
		div_end();
		div_start('generate');
		div_end();

	}
	/********************************************************************************************************//**
	 *get_attributes_array
	 * 
	 * 	Produces an array of variablenames with their slugs and human readable
	 * 	example
	 *		array[sockcolor][0] = red/Red
	 *		array[sockcolor][1] = blue/Blue
	 *		array[sockcolor][2] = black/Black
	 *
	 * ************************************************************************************************************/
	function get_attributes_array()
	{
		$sql2 = "SELECT variablename, value, slug from " . TB_PREF . "woo_prod_variables_values";
		$res2 = db_query( $sql2, "Couldn't select attributes" );
		while( $row2 = db_fetch_assoc( $res2 ) )
		{
			$this->attribsarray[$row2['variablename']][] = array( 'human' => $row2['value'], 'machine' => $row2['slug'] );
		}
		//var_dump( $this->attribsarray );
	}
	/**********************************************************************************************************//**
	 *attribsarray2sku
	 *
	 * 	This function takes a variable name, and generates all of the possible combinations for it
	 * 	Example
	 * 		IN: hose/Hose, sockcolor
	 * 		OUT:	outarray[] = hose-red/Hose Red
	 * 			outarray[] = hose-blue/Hose Blue
	 * 			outarray[] = hose-black/Hose Black
	 *
	 * 		2nd attr
	 * 		IN:	hose-red/Hose Red, size
	 * 		OUT:	outarray[] = hose-red-s/Hose Red Small
	 * 			outarray[] = hose-red-m/Hose Red Medium
	 * 			...
	 *
	 * @params stock_it
	 * @params description
	 * @params variablename
	 * @returns array
	 *
	 * *************************************************************************************************************/
	function attribsarray2sku( $stock_id, $description, $variablename, $parentarray = null )
	{
		$outarray = array();
		$count=0;
		foreach( $this->attribsarray[$variablename] as $values )
		{
			/*
			if( !isset( $outarray[$sku] ) )
			{
				$sql = "SELECT description from " . TB_PREF . "TABLENAME where stock_id = " . $sku;
				$res = db_query( $sql, "Couldn't get description for sku" . $sku );
				$ret = db_fetch_assoc( $res );
				$outarray[$sku]['machine'] = $sku;
				if( false !== $ret )
					$outarray[$sku]['human'] = $ret['description'];
				else
					$outarray[$sku]['human'] = "";
			}
			 */
			$outarray[$stock_id][$count]['human']   = $description . " " . $values['human'];
			$outarray[$stock_id][$count]['machine'] = $stock_id . "-" . $values['machine'];
			if( isset( $parentarray['attribute'] ) )
			{
				foreach( $parentarray['attribute'] as $arr )
				{
					$outarray[$stock_id][$count]['attribute'][] = $arr;
				}
				$outarray[$stock_id][$count]['attribute'][] = array( $variablename => $values['human']);
			}
			else
			{
				$outarray[$stock_id][$count]['attribute'][] = array( $variablename => $values['human']);
			}
			//var_dump( $outarray[$stock_id][$count]['attribute'] );
			//echo "<br />";
			$count++;
		}
		return $outarray;
	}
	/*************************************************************************************************************//**
	 *variables2sku
	 *
	 *	This function generates the long sku from variables.
	 *
	 *	@returns array  $prodarray[$stock_id][NUM][human] / $prodarray[$stock_id][NUM][machine]
	 *
	 * *****************************************************************************************************************/
	function variables2sku(  )
	{
		$sql = "SELECT c.stock_id as stock_id, c.variablename as attribute, p.description as description from " . TB_PREF . "woo_prod_variable_sku_combos c, " . TB_PREF . "woo_prod_variable_master p where p.stock_id = c.stock_id order by stock_id,priority";
		if( $this->debug > 1 )
			$sql .= " LIMIT 2";
		$res = db_query( $sql, "Couldn't generate combos of SKUs" );
		$prodarray = array();
		while( $row = db_fetch_assoc( $res ) )
		{
			/*
			* 	attribsarray2sku Example
		 	* 		IN: hose/Hose, sockcolor
	 		* 		OUT:	outarray[] = hose-red/Hose Red
	 		* 			outarray[] = hose-blue/Hose Blue
	 		* 			outarray[] = hose-black/Hose Black
	 		*
	 		* 		2nd attr
	 		* 		IN:	hose-red/Hose Red, size
	 		* 		OUT:	outarray[] = hose-red-s/Hose Red Small
	 		* 			outarray[] = hose-red-m/Hose Red Medium
	 		* 			...
			 */
			$stock_id = $row['stock_id'];
			$attribute = $row['attribute'];
			$description = $row['description'];
			
			if( !isset( $prodarray[$stock_id] ) )
			{
				$prodarray[$stock_id] = $this->attribsarray2sku( $stock_id, $description, $attribute, null );
				//echo __METHOD__ . ":" . __LINE__ . "<br /><br />";
				//print_r( $prodarray );
			}
			else
			{
				$loopcount = 0;
				foreach( $prodarray[$stock_id][$stock_id] as  $arr )
				//foreach( $prodarray[$stock_id] as $num => $arr )
				{
					//echo __METHOD__ . ":" . __LINE__ . "<br /><br />";
					//print_r( $arr );
					$prodarray[$stock_id][$loopcount] = $this->attribsarray2sku( $arr['machine'], $arr['human'], $attribute, $arr );
					//$prodarray[$stock_id][$loopcount] = $this->attribsarray2sku( $arr['machine'], $arr['human'], $attribure );
					//echo __METHOD__ . ":" . __LINE__ . "<br /><br />";
					//print_r( $prodarray[$stock_id][$loopcount] );
					$loopcount++;
					//echo __METHOD__ . ":" . __LINE__ . "<br /><br />";
					//print_r( $prodarray );
				}
			}
		}
		//echo __METHOD__ . ":" . __LINE__ . "<br /><br />";
		//print_r( $prodarray );
		return $prodarray;
	}
	function build_leftjoin_query( $count )
	{
		/*
				SELECT distinct m.description, 
		 		c.stock_id, 
				c.variablename, 
				c2.variablename, 
				c3.variablename, 
				c4.variablename, 
				v.value, 
				v.slug, 
				v2.value, 
				v2.slug, 
				v3.value, 
				v3.slug, 
				v4.value, 
				v4.slug, 
				concat(c.stock_id,'-',v.slug,'-',v2.slug,'-',v3.slug,'-',v4.slug) as machine, 
				concat( m.description,' ',v.value,' ',v2.value,' ',v3.value,' ',v4.value) as Readable 
				FROM 0_woo_prod_variable_sku_combos c
				LEFT JOIN 0_woo_prod_variable_sku_combos as c2 on c.stock_id = c2.stock_id
				LEFT JOIN 0_woo_prod_variable_sku_combos as c3 on c.stock_id = c3.stock_id
				LEFT JOIN 0_woo_prod_variable_sku_combos as c4 on c.stock_id = c4.stock_id
				LEFT JOIN 0_woo_prod_variables_values as v on c.variablename = v.variablename
				LEFT JOIN 0_woo_prod_variables_values as v2 on c2.variablename = v2.variablename
				LEFT JOIN 0_woo_prod_variables_values as v3 on c3.variablename = v3.variablename
				LEFT JOIN 0_woo_prod_variables_values as v4 on c4.variablename = v4.variablename
				LEFT JOIN 0_woo_prod_variable_master as m on c.stock_id = m.stock_id
		WHERE
				c.priority < c2.priority and
				c2.priority < c3.priority and
				c3.priority < c4.priority
				order by c.variablename, c.priority, c2.priority, c3.priority, c4.priority

		SELECT distinct m.description, 
		 		c.stock_id, 
				c.variablename, 
				c2.variablename, 
				c3.variablename, 
				c4.variablename				FROM `0_woo_prod_variable_sku_combos` as c
				LEFT JOIN 0_woo_prod_variable_sku_combos as c2 on c.stock_id = c2.stock_id
				LEFT JOIN 0_woo_prod_variable_sku_combos as c3 on c.stock_id = c3.stock_id
				LEFT JOIN 0_woo_prod_variable_sku_combos as c4 on c.stock_id = c4.stock_id
				
			LEFT JOIN 0_woo_prod_variable_master as m on c.stock_id = m.stock_id
		WHERE
				c.priority < c2.priority ;

		 */
		$select = " SELECT distinct m.description, 
		 		c.stock_id, 
				c.variablename as vname1, v.value1, v.slug1";
		$from = "FROM 0_woo_prod_variable_sku_combos c
				LEFT JOIN 0_woo_prod_variables_values as v on c.variablename = v.variablename
				LEFT JOIN 0_woo_prod_variable_master as m on c.stock_id = m.stock_id";
		if( $count > 1 )
		{
			$where = " WHERE ";
		}
		else
		{
			$where = "";
		}
		$machine = ", concat(c.stock_id,'-',v.slug";
		$readable = ", concat( m.description,' ',v.value";
		$orderby = "order by c.variablename, c.priority";
		for( $j = 2; $j <= $count; $j++ )
		{
			$select .= ", c" . $j . ".variablename as vname" . $j . ", v" . $j . ".value as value" . $j . ", v" . $j . ".slug as slug" . $j . "";
			$machine .= ",'-',v" . $j . ".slug";
			$readable .= ",' ',v" . $j . ".value";
			$from .= " LEFT JOIN " . TB_PREF . "woo_prod_variable_sku_combos as c" . $j . " on c.stock_id = c" . $j . ".stock_id";
			$from .= " LEFT JOIN " . TB_PREF . "woo_prod_variables_values as v" . $j . " on c" . $j . ".variablename = c" . $j . ".variablename";
			if( $j > 2 )
				$where .= " and c" . $j-1 . ".priority < c" . $j . ".priority ";
			else
				$where .= " c.priority < c" . $j . ".priority ";
			$orderby .= ", c" . $j . ".priority";
		}
		$machine .= ") as machine";
		$readable .= ") as Readable";
		$select .= $machine . $readable;

		$query = $select . " " . $from . " " . $where . " " . $orderby;
		return $query;
	}
	function tbd()
	{
		$addedlist = array();	//stock_ids
		$last_sku = "";
		$current_sku = "";
		$this->get_minmax_attributes();
		for( $j = $this->maxattr; $j >= $this->minattr; $j-- )
		{
			$query = $this->build_leftjoin_query();
			$res2 = db_query( $query, "Couldn't select attributes" );
			while( $row2 = db_fetch_assoc( $res2 ) )
			{
				if( !in_array( $row2['stock_id'], $addedlist ) )
				{
					//insert attributes
					$this->insert_attributes( $row2, $j );
				}
				//insert SKU
				$this->create_variable_product( $row2 );
				if( $current_sku != $row2['stock_id'] )
					$current_sku = $row2['stock_id'];
			}
		}
	}
	function insert_attributes( $arr, $count )
	{
		//$arr has description, stock_id, vnameX, valueX, slugX, machine, readable
		//Create the ATTRIBUTES that need to be sent to WOO
		require_once( 'class.woo_prod_variation_attributes.php' );
		$pva = new woo_prod_variation_attributes( null, null, null, null, null );
		$pva->sku = $arr['stock_id'];
		for( $j = 1; $j <= $count; $j++ )
		{
			$pva->name = $arr['vname' . $j];
			$pva->option = $arr['value' . $j];
			$pva->insert_table();
		}

	}
	function create_variable_product( $arr )
	{
		//Create the product itself
		//needs to appear in woo_prod_variable_sku_full
		$this->reset_values();
		$this->stock_id = $arr['stock_id'];
		$this->sku = $arr['machine'];		
		$this->description = $arr['readable'];
		$this->inserted_fa = 0;
		$this->woo_id = 0;		
		$this->insert_table();
	}
	function get_minmax_attributes()
	{
		require_once( 'class.woo_prod_variable_sku_combos.php' );
		$wpvsc = new woo_prod_variable_sku_combos( null, null, null, null, null );	
		$wpvsc->get_minmax_attributes();
		$this->minattr = $wpvsc->minattr;
		$this->maxattr = $wpvsc->maxattr;
	}
	/*************************************************************************//**
	 *
	 *	This function will create the full skus based on the attributes
	 *	and their priority order.
	 *
	 * ***************************************************************************/
	function create_full()
	{
		$this->get_minmax_attributes();
		/*
		  *
		  *
		 *SELECT distinct m.description, 
		 		c.stock_id, 
				c.variablename, 
				c2.variablename, 
				c3.variablename, 
				v.value, 
				v.slug, 
				v2.value, 
				v2.slug, 
				v3.value, 
				v3.slug, 
				concat(c.stock_id,'-',v.slug,'-',v2.slug,'-',v3.slug) as machine, 
				concat( m.description,' ',v.value,' ',v2.value,' ',v3.value) as Readable 
		FROM `0_woo_prod_variable_sku_combos` c, 
				`0_woo_prod_variable_sku_combos` c2, 
				`0_woo_prod_variable_sku_combos` c3, 
				`0_woo_prod_variables_values` v, 
				`0_woo_prod_variables_values` v2, 
				`0_woo_prod_variables_values` v3,
				`0_woo_prod_variable_master` m 
		where c.variablename = v.variablename and 
				c2.variablename = v2.variablename and 
				c3.variablename = v3.variablename and 
				c.stock_id = m.stock_id and 
				c.stock_id = c2.stock_id and 
				c.stock_id = c3.stock_id and
				c.priority < c2.priority and
				c2.priority < c3.priority
		order by c.variablename, c.priority, c2.priority, c3.priority 
		*
		*
			SELECT t1.name AS lev1, t2.name as lev2, t3.name as lev3, t4.name as lev4
				FROM category AS t1
				LEFT JOIN category AS t2 ON t2.parent = t1.category_id
				LEFT JOIN category AS t3 ON t3.parent = t2.category_id
				LEFT JOIN category AS t4 ON t4.parent = t3.category_id
				WHERE t1.name = 'ELECTRONICS';
		*
		*

				
		*
		*
		* 
		  
		SELECT distinct m.description, 
		 		c.stock_id, 
				c.variablename, 
				c2.variablename, 
				c3.variablename, 
				c4.variablename, 
				v.value, 
				v.slug, 
				v2.value, 
				v2.slug, 
				v3.value, 
				v3.slug, 
				v4.value, 
				v4.slug, 
				concat(c.stock_id,'-',v.slug,'-',v2.slug,'-',v3.slug,'-',v4.slug) as machine, 
				concat( m.description,' ',v.value,' ',v2.value,' ',v3.value,' ',v4.value) as Readable 
		FROM `0_woo_prod_variable_sku_combos` c, 
				`0_woo_prod_variable_sku_combos` c2, 
				`0_woo_prod_variable_sku_combos` c3, 
				`0_woo_prod_variable_sku_combos` c4, 
				`0_woo_prod_variables_values` v, 
				`0_woo_prod_variables_values` v2, 
				`0_woo_prod_variables_values` v3,
				`0_woo_prod_variables_values` v4,
				`0_woo_prod_variable_master` m 
		where c.variablename = v.variablename and 
				c2.variablename = v2.variablename and 
				c3.variablename = v3.variablename and 
				c4.variablename = v4.variablename and 
				c.stock_id = m.stock_id and 
				c.stock_id = c2.stock_id and 
				c.stock_id = c3.stock_id and
				c.stock_id = c4.stock_id and
				c.priority < c2.priority and
				c2.priority < c3.priority and
				c3.priority < c4.priority
		order by c.variablename, c.priority, c2.priority, c3.priority, c4.priority
		 * */
		$this->get_attributes_array();
		$prodarray = $this->variables2sku();
		//var_dump( $prodarray );
		//Now need to insert/process the array
		//However, this is more of a tree - we don't want each branching point
		//(i.e. attribute chain) to have a SKU so that we don't end up with
		//	prod
		//	prod-color
		//	prod-color-size
		//being created when it is really prod-color-size that we want!
		//prod would be the master product that is cloned.
		foreach( $prodarray as $stock_id=>$arr )
		{
			$this->recursive_array2prod( $arr, 0, $stock_id );
		}
	}
	function recursive_array2prod( $prodarray, $depth = 0, $stock_id )
	{
		if( is_array( $prodarray ) )
		{
			if( count( $prodarray ) > 1 )
			{
				$depth++;
				foreach( $prodarray as $arr )
				{
					//array of array of...
					$ret = $this->recursive_array2prod( $arr, $depth, $stock_id );
				}
			}
			else
			{
				//Looks like this is the farthest leaf on the tree!
				//If depth is 1, end of tree.  If depth is greater than 1 than we
				//are at an attribute.
				echo "<br />" . __METHOD__ . ":" . __LINE__ . " Depth: " . $depth . "<br />";
				var_dump( $prodarray );
				if( $depth == 1 )
				{
					foreach( $prodarray as $arr )
					{
						//Array of variable products within the master product
						//echo "<br />" . __METHOD__ . ":" . __LINE__ .  "<br />";
						//var_dump( $arr );
						if( isset( $arr["attribute"] ) )
						{
							//Generate the product
							//echo "<br />" . __METHOD__ . ":" . __LINE__ .  " KEY: " . $stock_id . "<br />";
							//var_dump( $arr );
							$this->generate_variable_product( $arr, $stock_id );
						}
						else
						{
							foreach( $arr as $arr2 )
							{
								if( isset( $arr2["attribute"] ) )
								{
									//Generate the product
									//echo "<br />" . __METHOD__ . ":" . __LINE__ .  " KEY: " . $stock_id . "<br />";
									//var_dump( $arr2 );
									$this->generate_variable_product( $arr2, $stock_id );
								}
								else
								{
									//echo "<br />" . __METHOD__ . ":" . __LINE__ .  " KEY: " . $stock_id . "<br />";
									//var_dump( $arr2 );
								}
							}

						}
					}
				}
				return FALSE;
			}
		}
		else
		{
			//We've hit the last array value
			//It is now just an attribute
				//echo "<br />" . __METHOD__ . ":" . __LINE__ . " Depth: " . $depth . "<br />";
				//var_dump( $prodarray );
			return FALSE;
		}
	}
	function generate_variable_product( $arr, $stock_id )
	{
		echo "<br />" . __METHOD__ . ":" . __LINE__ .  " KEY: " . $stock_id . "<br />";
		var_dump( $arr );
		//arr has human, machine, attribute[]
		$sku = $arr['machine'];

		//Create the ATTRIBUTES that need to be sent to WOO
		require_once( 'class.woo_prod_variation_attributes.php' );
		$pva = new woo_prod_variation_attributes( null, null, null, null, null );
		foreach( $arr['attribute'] as $index => $values )
		{
			foreach( $values as $key=>$val )
			{
				$pva->name = $key;
				$pva->option = $val;
				$pva->sku = $sku;
				$pva->insert_table();
			}
		}
		//Create the product itself
		//needs to appear in woo_prod_variable_sku_full
		$this->reset_values();
		$this->stock_id = $stock_id;
		$this->sku = $arr['machine'];		
		$this->description = $arr['human'];
		$this->inserted_fa = 0;
		$this->woo_id = 0;		
		$this->insert_table();
	}

}


?>
